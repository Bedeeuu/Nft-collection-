const http = require('http');

const server = http.createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    if (req.method === 'GET' && req.url === '/') {
        const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéØ NFT –û–±—Ä–∞–±–æ—Ç—á–∏–∫ - –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: rgba(0,0,0,0.2);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }
        .step-card {
            background: rgba(255,255,255,0.1);
            padding: 25px;
            border-radius: 15px;
            margin: 20px 0;
            border-left: 5px solid #4CAF50;
            transition: all 0.3s;
        }
        .btn {
            background: #4CAF50;
            color: white;
            padding: 15px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            margin: 10px 5px;
            font-size: 16px;
            transition: all 0.3s;
        }
        .btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        .btn-process {
            background: #ff9800;
            font-size: 18px;
            padding: 20px 30px;
            font-weight: bold;
        }
        .btn-process:hover {
            background: #f57c00;
        }
        .status {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }
        .status.ready {
            background: #4CAF50;
        }
        .status.waiting {
            background: #ff9800;
        }
        .status.completed {
            background: #2196F3;
        }
        #result {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            display: none;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: rgba(255,255,255,0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            width: 0%;
            transition: width 0.5s;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ NFT –û–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ß—Ç–æ –¥–∞–ª—å—à–µ?</h1>
        
        <div class="step-card">
            <h2>‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h2>
            <p><strong>–†–∞–∑–º–µ—Ä:</strong> ~1.3 –ú–ë | <strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status completed">–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ</span></p>
            <p>–í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NFT.</p>
        </div>
        
        <div class="step-card">
            <h3>ü§ñ –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ò–ò</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status ready">–ì–æ—Ç–æ–≤</span></p>
            <p>–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ NFT —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.</p>
            <button class="btn btn-process" onclick="generateAIDescription()">
                üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
            </button>
        </div>
        
        <div class="step-card">
            <h3>üìù –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status waiting">–û–∂–∏–¥–∞–Ω–∏–µ</span></p>
            <p>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ ERC-721.</p>
            <button class="btn" onclick="createMetadata()">
                üìä –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            </button>
        </div>
        
        <div class="step-card">
            <h3>üåê –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status waiting">–û–∂–∏–¥–∞–Ω–∏–µ</span></p>
            <p>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.</p>
            <button class="btn" onclick="uploadToGitHub()">
                üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ GitHub
            </button>
        </div>
        
        <div class="step-card">
            <h3>üé® –®–∞–≥ 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è NFT</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status waiting">–û–∂–∏–¥–∞–Ω–∏–µ</span></p>
            <p>–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ NFT —Ç–æ–∫–µ–Ω–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.</p>
            <button class="btn" onclick="finalizeNFT()">
                ‚ú® –°–æ–∑–¥–∞—Ç—å NFT
            </button>
        </div>
        
        <div id="progress-section" style="display: none;">
            <h3>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</h3>
            <div class="progress-bar">
                <div class="progress-fill" id="progressBar"></div>
            </div>
            <p id="progressText">–ì–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É</p>
        </div>
        
        <div id="result"></div>
        
        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 30px 0;">
            <h3>üí° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
            <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                <button class="btn" onclick="viewFile()">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞</button>
                <button class="btn" onclick="editSettings()">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                <button class="btn" onclick="autoProcess()">ü§ñ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞</button>
                <a href="http://localhost:3003" target="_blank" class="btn">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</a>
            </div>
        </div>
    </div>
    
    <script>
        async function generateAIDescription() {
            showProgress();
            updateProgress(0, '–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–π...');
            
            try {
                updateProgress(30, '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...');
                await sleep(1000);
                
                updateProgress(60, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...');
                
                const response = await fetch('/generate-description', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        fileSize: '1.3MB',
                        uploadTime: new Date().toISOString()
                    })
                });
                
                updateProgress(90, '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
                await sleep(500);
                
                const result = await response.json();
                
                updateProgress(100, '–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!');
                
                showResult('<h3>‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!</h3>' +
                    '<div style="background: rgba(0,0,0,0.5); padding: 15px; border-radius: 8px;">' +
                    '<h4>üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</h4>' +
                    '<p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ' + result.title + '</p>' +
                    '<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ' + result.description + '</p>' +
                    '<p><strong>–ê—Ç—Ä–∏–±—É—Ç—ã:</strong></p>' +
                    '<ul>' +
                    result.attributes.map(attr => '<li><strong>' + attr.trait_type + ':</strong> ' + attr.value + '</li>').join('') +
                    '</ul>' +
                    '</div>' +
                    '<button class="btn btn-process" onclick="nextStep()">‚û°Ô∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</button>');
                
            } catch (error) {
                showResult('<h3>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3><p>' + error.message + '</p>');
            }
        }
        
        function createMetadata() {
            alert('üìä –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT...\\n\\n–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω JSON —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è NFT —Ç–æ–∫–µ–Ω–∞.');
        }
        
        function uploadToGitHub() {
            alert('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub...\\n\\n–§–∞–π–ª –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.');
        }
        
        function finalizeNFT() {
            alert('‚ú® –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è NFT...\\n\\n–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –≤—Å–µ–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.');
        }
        
        function autoProcess() {
            if (confirm('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É?\\n\\n–≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ —à–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\\n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è\\n2. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö\\n3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub\\n4. –°–æ–∑–¥–∞–Ω–∏–µ NFT')) {
                generateAIDescription();
            }
        }
        
        function viewFile() {
            alert('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...');
        }
        
        function editSettings() {
            alert('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ NFT...');
        }
        
        function nextStep() {
            alert('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≥–æ—Ç–æ–≤!');
        }
        
        function showProgress() {
            document.getElementById('progress-section').style.display = 'block';
        }
        
        function updateProgress(percent, text) {
            document.getElementById('progressBar').style.width = percent + '%';
            document.getElementById('progressText').textContent = text;
        }
        
        function showResult(html) {
            const result = document.getElementById('result');
            result.innerHTML = html;
            result.style.display = 'block';
            result.scrollIntoView({ behavior: 'smooth' });
        }
        
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        window.onload = function() {
            console.log('üéØ NFT –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤!');
        };
    </script>
</body>
</html>`;
        
        res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
        res.end(html);
        return;
    }
    
    if (req.method === 'POST' && req.url === '/generate-description') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è NFT...');
            
            const descriptions = [
                "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –≤–æ–ø–ª–æ—â–∞—é—â–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —ç—Å—Ç–µ—Ç–∏–∫—É –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ",
                "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π NFT —Ç–æ–∫–µ–Ω —Å –±–æ–≥–∞—Ç–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏",
                "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏–∫",
                "–†–µ–¥–∫–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º"
            ];
            
            const titles = [
                "–¶–∏—Ñ—Ä–æ–≤–æ–π –®–µ–¥–µ–≤—Ä",
                "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ö–æ–º–ø–æ–∑–∏—Ü–∏—è", 
                "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –í–∏–¥–µ–Ω–∏–µ",
                "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ò–º–ø—É–ª—å—Å"
            ];
            
            const randomDescription = descriptions[Math.floor(Math.random() * descriptions.length)];
            const randomTitle = titles[Math.floor(Math.random() * titles.length)];
            
            const aiResult = {
                title: randomTitle + " #" + Math.floor(Math.random() * 1000),
                description: randomDescription,
                attributes: [
                    { trait_type: "–°—Ç–∏–ª—å", value: "–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ" },
                    { trait_type: "–†–µ–¥–∫–æ—Å—Ç—å", value: Math.random() > 0.5 ? "–†–µ–¥–∫–∏–π" : "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π" },
                    { trait_type: "–†–∞–∑–º–µ—Ä", value: "1.3 –ú–ë" },
                    { trait_type: "–°–æ–∑–¥–∞–Ω", value: new Date().toLocaleDateString('ru-RU') },
                    { trait_type: "–ö–∞—á–µ—Å—Ç–≤–æ", value: "–í—ã—Å–æ–∫–æ–µ" }
                ],
                creator: "NFT Artist",
                timestamp: new Date().toISOString(),
                id: "NFT_" + Date.now()
            };
            
            console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', aiResult.title);
            
            res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
            res.end(JSON.stringify(aiResult, null, 2));
        });
        return;
    }
    
    res.writeHead(404, {'Content-Type': 'text/plain; charset=utf-8'});
    res.end('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
});

const PORT = 3004;
server.listen(PORT, () => {
    console.log('üéØ NFT –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:' + PORT);
    console.log('üìù –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT');
    console.log('ü§ñ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
});

module.exports = server;